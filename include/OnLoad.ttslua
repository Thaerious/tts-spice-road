log("onLoad.lua")
--[[ The onLoad event is called after the game save finishes loading. --]]
function onLoad(saved_data)
    log("onLoad")
    getObjectFromGUID(keys.playingIndicator).registerCollisions()

    setupZones()
    setupCaravanCards()
    addHotkey("quickAction", quickAction)

    addClass(getObjectFromGUID(keys.bags.yellow), "cubeBag")
    addClass(getObjectFromGUID(keys.bags.red), "cubeBag")
    addClass(getObjectFromGUID(keys.bags.green), "cubeBag")
    addClass(getObjectFromGUID(keys.bags.brown), "cubeBag")

    if saved_data ~= "" and saved_data ~= nil then
        local loaded_data = JSON.decode(saved_data)
        if loaded_data.state ~= "not_started" then
            gameModel = loaded_data
            hideStartButton();
            loadSavedData()
        end
    end

    getObjectFromGUID(keys.coinBags.gold).interactable = false
    getObjectFromGUID(keys.coinBags.silver).interactable = false
    if getObjectFromGUID(keys.actionCards) then getObjectFromGUID(keys.actionCards).interactable = false end
    getObjectFromGUID(keys.pointCards).interactable = false

    replaceCubes()
    claimOwners()
end

function claimOwners()
    for i = 1,#gameModel.turns do        
        local color = gameModel.turns[i]
        local handObjects = getPlayableCards(color)   
        for index, handObject in ipairs(handObjects) do
            handObject.setVar("owner", color)
        end
    end
end

function loadSavedData()
    addTakeButton(getActionCards()[1], "takeActionCard")

    for i = 2, gameModel.paidIndex + 1 do
        addTakeButton(getActionCards()[i], "takeActionCard")
    end

    for i = 1, gameModel.numPlayers do
        local color = gameModel.turns[i]
        tallyScore(color)
        if gameModel.players[color].bot == true then
            initBot(color)
        end
    end

    evaluatePointTakeButtons()
    evaluateActionTakeButtons()
    incrementDebugPlayer()
end

-- replace all cubes with newly generated cubes
-- cubes that were loaded can not be disposed of in the bags
function replaceCubes()
    for i = 1,#gameModel.turns do
        local color = gameModel.turns[i]
        getPlayerCubes(color):destruct(function(count) addCubesToPlayerCard(color, count) end)
    end
end

function setupCaravanCards()
    for color,key in pairs(keys.caravanCards) do
        local caravanCard = getObjectFromGUID(key)
        if caravanCard ~= nil then
            caravanCard.setVar("owner", color)
            setupRestButton(color)
            caravanCard.addContextMenuItem("Sort Cubes", function(a, b) sortCubes(a) end)
            caravanCard.addContextMenuItem("Sort Action Cards", sortActionCards)

            -- enable card collision for cube debug placement
            caravanCard.registerCollisions()
        end
    end
end

function setupRestButton(color)
   local playerCard = getObjectFromGUID(keys.caravanCards[color])

   parameters = {
       click_function = "rest",
       label = "R",
       position = {0.8, 1.0, 0.9},
       scale = {1, 1, 1},
       width = 200,
       height = 300,
       font_size = 150,
       color = {1, 1, 1},
       tooltip = "Rest and/or\nPickup Cards"
   }

   playerCard.createButton(parameters)
end

function setupZones()
    for i,key in ipairs(keys.actionCardsScriptingZone) do
        getObjectFromGUID(key).setVar("index", i)
        getObjectFromGUID(key).setVar("modelClass", "zone actionCards")
    end

    for i,key in ipairs(keys.pointCardsScriptingZone) do
        getObjectFromGUID(key).setVar("index", i)
        getObjectFromGUID(key).setVar("modelClass", "zone pointsCards")
    end

    for c,key in pairs(keys.caravanCardZone) do
        local zone = getObjectFromGUID(key)
        if zone ~= nil then
            addClass(zone, "caravan")
            zone.setVar("owner", c)
            for i,o in ipairs(getObjectsByClass(zone, "cube")) do
                cubeSetOwner(o, c)
            end
        end
    end
end

function onSave()
    return JSON.encode(gameModel)
end