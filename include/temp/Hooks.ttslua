
function cubeCollideCard(card, cube)
    local activeObject = getObjectFromGUID(gameModel.active.guid)

    if card ~= activeObject and activeObject.getVar("state") ~= "spent" then
        setActive(card)
    end

    if card ~= activeObject then return end

    if isClass(card, "exchange") then
        exchangeCube(card, gameModel.currentPlayer)
    elseif isClass(card, "promote") then
        promoteAct(card, gameModel.currentPlayer)
    end
end

function onPawnCollideCaravan(caravan)
   local color = caravan.getVar("owner")
   clearActive()
   endTurnCleanup()
   startTurn(color)
end

function onObjectEnterScriptingZone(zone, obj)
    if isClass(zone, "actionCards") and isClass(obj, "cube") then
        onCubeEnterScriptingZone(zone, obj) -- pay for action card
    elseif isClass(zone, "actionCards") and isClass(obj, "card") then
        obj.setVar("index", zone.getVar("index")) -- set index on dealt cards
    end
end

function onObjectLeaveScriptingZone(zone, obj)
    if isClass(zone, "actionCards") and isClass(obj, "cube") then
        onCubeLeaveScriptingZone(zone, obj) -- un pay for action card
    end
end

-- prevent players from messing with objects that aren't theirs
function onObjectPickUp(color, obj)
    if color == "Black" then return end
    if gameModel.players[color].dev == true then return end
    local owner = obj.getVar("owner")

    if owner == nil then return true end

    if owner ~= color then
        obj.drop()
        local p = obj.getPosition()
        obj.setPosition(p)
        obj.setVelocity({x=0, y=0, z=0})
    end
end

-- performed when a card is played
function playCard(color, card)
    if card.getVar("state") == "ready" then
        setupContextMenu(card)
        setActive(card)
        card.registerCollisions()
    end
end

-- set game state to 'card not played'
function clearActive()
    if gameModel.active.guid ~= "" and getObjectFromGUID(gameModel.active.guid) ~= nil then
        local card = getObjectFromGUID(gameModel.active.guid)
        card.unregisterCollisions()
        card.clearContextMenu()
    end

    gameModel.active.action = ""
    gameModel.active.guid = ""
    gameModel.active.value = ""
end

function filterObjectEnterContainer(container, enter_object)
    if isClass(enter_object, "card") then return false end
    return true
end
