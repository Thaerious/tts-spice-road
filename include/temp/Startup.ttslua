DEBUG_PLAYER_COUNT = 3

--[[ The onLoad event is called after the game save finishes loading. --]]
function onLoad(saved_data)
    getObjectFromGUID(keys.playingIndicator).registerCollisions()
    setupZones()
    setupCaravanCards()
    addHotkey("quickAction", quickAction)

    setupCollisionHooks();

    addClass(getObjectFromGUID(keys.bags.yellow), "cubeBag")
    addClass(getObjectFromGUID(keys.bags.red), "cubeBag")
    addClass(getObjectFromGUID(keys.bags.green), "cubeBag")
    addClass(getObjectFromGUID(keys.bags.brown), "cubeBag")

    if saved_data ~= "" and saved_data ~= nil then
        local loaded_data = JSON.decode(saved_data)
        if loaded_data.state ~= "not_started" then
            gameModel = loaded_data
            loadSavedData()
        end
    end

    getObjectFromGUID(keys.coinBags.gold).interactable = false
    getObjectFromGUID(keys.coinBags.silver).interactable = false
    if getObjectFromGUID(keys.actionCards) then getObjectFromGUID(keys.actionCards).interactable = false end
    getObjectFromGUID(keys.pointCards).interactable = false

    addContextMenuItem("Start Game", startGame)
    replaceCubes()
end

function loadSavedData()
    hideUI()
    addTakeButton(getActionCards()[1], "takeActionCard")

    for i = 2, gameModel.paidIndex + 1 do
        addTakeButton(getActionCards()[i], "takeActionCard")
    end

    for i = 1, gameModel.numPlayers do
        local color = gameModel.turns[i]
        tallyScore(color)
        if gameModel.players[color].bot == true then
            initBot(color)
        end
    end

    evaluatePointTakeButtons()
    evaluateActionTakeButtons()
    incrementDebugPlayer()
end

-- replace all cubes with newly generated cubes
-- cubes that were loaded can not be disposed of in the bags
function replaceCubes()
    for i = 1,#gameModel.turns do
        local color = gameModel.turns[i]
        getPlayerCubes(color):destruct(function(count) addCubesToPlayerCard(color, count) end)
    end
end

-- function called once when the game loads or starts
function startGame(a, b)
    if a.host == false then
        broadcastToAll("Only the host can start the game")
        return
    end

    clearContextMenu()
    addContextMenuItem("Sort Action Cards", sortActionCards)
    addContextMenuItem("Sort Cubes", function(color, b) sortCubes(color) end)

    gameModel.numPlayers = #Player.getPlayers() + GLOBAL_BOT_COUNT

    if gameModel.numPlayers > 5 then
        GLOBAL_BOT_COUNT = 0
        gameModel.numPlayers = #Player.getPlayers()
    end

    if gameModel.numPlayers == 1 then gameModel.numPlayers = DEBUG_PLAYER_COUNT end -- debug mode

    clearExtraPieces()

    -- remove unplayed colors
    local newTurns = {}
    for i = 1, gameModel.numPlayers do
        newTurns[#newTurns + 1] = gameModel.turns[i]
    end
    gameModel.turns = newTurns;

    setupTurns(gameModel.numPlayers)
    assignPlayers() -- randomize the player colors

    -- set number of points cards to end the game
    if gameModel.numPlayers > 3 then
        gameModel.victoryCondition = 5
    else
        gameModel.victoryCondition = 6
    end

    dealCubes()
    hideUI()
    setupCoins()
    dealCards("pointCards", nil);
    dealCards("actionCards", function() startTurn(gameModel.currentPlayer) end);
end

function dealCubes()
    local cubeCount = CubeCount:new()
    cubeCount.yellow = 3

    for i = 1, gameModel.numPlayers do
        if i == 2 then
            cubeCount.yellow = 4
        elseif i == 4 then
            cubeCount.red = 1
        end

        local owner = gameModel.turns[i]
        addCubesToPlayerCard(owner, cubeCount, nil)

    end
end

function clearExtraPieces()
    for i = gameModel.numPlayers + 1, #gameModel.turns do
        local color = gameModel.turns[i]

        local zone = getObjectFromGUID(keys.caravanCardZone[color])
        if (zone == nil) then return end -- assume it and all associated objects are already destroyed

        local objects = getObjectFromGUID(keys.caravanCardZone[color]).getObjects()
        for i,o in ipairs(objects) do o.destruct() end

        getObjectFromGUID(keys.caravanCards[color]).destruct()
        getObjectFromGUID(keys.caravanCardZone[color]).destruct()
        getObjectFromGUID(keys.scores[color]).destruct()
        getObjectFromGUID(keys.names[color]).destruct()

        getObjectFromGUID(keys.startingCards[color][1]).destruct()
        getObjectFromGUID(keys.startingCards[color][2]).destruct()
    end
end

function setupCaravanCards()
    for color,key in pairs(keys.caravanCards) do
        local caravanCard = getObjectFromGUID(key)
        if caravanCard ~= nil then
            caravanCard.setVar("owner", color)
            setupRestButton(color)
            caravanCard.addContextMenuItem("Sort Cubes", function(a, b) sortCubes(a) end)
            caravanCard.addContextMenuItem("Sort Action Cards", sortActionCards)

            -- enable card collision for cube debug placement
            caravanCard.registerCollisions()
        end
    end

end

function setupRestButton(color)
   local playerCard = getObjectFromGUID(keys.caravanCards[color])

   parameters = {
       click_function = "rest",
       label = "R",
       position = {0.8, 1.0, 0.9},
       scale = {1, 1, 1},
       width = 200,
       height = 300,
       font_size = 150,
       color = {1, 1, 1},
       tooltip = "Rest and/or\nPickup Cards"
   }

   playerCard.createButton(parameters)
end

-- setup the turn order for 'n' participants
function setupTurns(n)
    local last = gameModel.turns[n]
    for i = 1,n do
        gameModel.nextPlayer[last] = gameModel.turns[i]
        last = gameModel.turns[i]
    end
end

function setupCoins()
    local goldBag = getObjectFromGUID(keys.coinBags.gold)
    local silverBag = getObjectFromGUID(keys.coinBags.silver)

    local n = (5 - gameModel.numPlayers) * 2

    for i = 1,n do
        goldBag.takeObject().destruct()
        silverBag.takeObject().destruct()
    end

    refillCoins(1, function() refillCoins(2) end)
end

-- randomize player positions
function assignPlayers()
    local players = Player.getPlayers()

    for i = 1, #players do
        local player = Player.getPlayers()[i]
        player.changeColor("Grey")
    end

    local availableColors = {}
    for i = 1, #gameModel.turns do
        availableColors[i] = gameModel.turns[i]
    end

    -- assign player colors
    while #Player.getSpectators() > 0 do
        local r = math.random(1, #Player.getSpectators())
        local player = Player.getSpectators()[r]

        local q = math.random(1, #availableColors)
        local color = table.remove(availableColors, q)
        player.changeColor(color)
    end

    for i=1, GLOBAL_BOT_COUNT do
        initBot(availableColors[#availableColors])
        availableColors[#availableColors] = nil
    end

    for i,player in ipairs(Player.getPlayers()) do
        local name = getObjectFromGUID(keys.names[player.color])
        name.setValue(player.steam_name)
    end
end

function setupZones()
    for i,key in ipairs(keys.actionCardsScriptingZone) do
        getObjectFromGUID(key).setVar("index", i)
        getObjectFromGUID(key).setVar("modelClass", "zone actionCards")
    end

    for i,key in ipairs(keys.pointCardsScriptingZone) do
        getObjectFromGUID(key).setVar("index", i)
        getObjectFromGUID(key).setVar("modelClass", "zone pointsCards")
    end

    for c,key in pairs(keys.caravanCardZone) do
        local zone = getObjectFromGUID(key)
        if zone ~= nil then
            addClass(zone, "caravan")
            zone.setVar("owner", c)
            for i,o in ipairs(getObjectsByClass(zone, "cube")) do
                cubeSetOwner(o, c)
            end
        end
    end
end
