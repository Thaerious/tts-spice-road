
function test_all()
    local tests = {
        test_00 = test_00,
        test_01 = test_01,
        test_02 = test_02,
        test_03 = test_03,
        test_04 = test_04,
        test_05a = test_05a,
        test_05b = test_05b,
        test_05c = test_05c,
        test_06a = test_06a,
        test_06b = test_06b,
        test_07 = test_07,
        test_08 = test_08,
        test_09 = test_09,
        test_10 = test_10,
        test_11 = test_11,
        test_12 = test_12,
        test_13a = test_13a,
        test_13b = test_13b,
        test_14a = test_14a,
        test_14b = test_14b,
        test_15 = test_15,
        test_16a = test_16a,
        test_16b = test_16b,
    }

    for i,v in pairs(tests) do
        log("test: " .. i)
        v()
    end
end

-- no change, make sure it doesn't crash
function test_00()
    local gameState = GameState:new()
    local actions = enumerateActions(gameState)
    local newState = updateState(gameState, actions[1])
    table.insert(newState.actionCards, "x")
end

-- on rest, all cards in spent go into playabe
function test_01()
    local gameState = GameState:new()
    gameState.spentCards = {3, 4}
    gameState.playableCards = {1, 2}

    gameState.cards = {
        {
            guid = "a1",
            action = "collect",
            cubes = {yellow = 2, red = 0, green = 0, brown = 0}
        },
        {
            guid = "a1",
            action = "collect",
            cubes = {yellow = 2, red = 0, green = 0, brown = 0}
        },
        {
            guid = "a1",
            action = "collect",
            cubes = {yellow = 2, red = 0, green = 0, brown = 0}
        },
        {
            guid = "a1",
            action = "collect",
            cubes = {yellow = 2, red = 0, green = 0, brown = 0}
        }
    }

    local actions = enumerateActions(gameState):refine("action", "rest")
    local newGameState = updateState(gameState, actions[1])

    for i,v in ipairs(newGameState.playableCards) do
        if v ~= i then error("failed test 1") end
    end

    if #newGameState.playableCards ~= 4 then error("failed test 2") end
    if #newGameState.spentCards ~= 0 then error("failed test 3") end
end

-- play a collect card, collects right away
function test_02()
    local gameState = GameState:new()
    gameState.playableCards = {"a1"}
    gameState.cards = {
        a1 = {
            guid = "a1",
            action = "collect",
            cubes = {yellow = 2, red = 0, green = 0, brown = 0}
        }
    }

    local actions = enumerateActions(gameState):refine("action", "play")
    local newGameState = updateState(gameState, actions[1])

    -- increment cubes
    if newGameState.cubes.yellow ~= 2 then error("failed test 1") end
    -- remove playable
    if #newGameState.playableCards ~= 0 then error("failed test 2") end
    -- add to spent
    if newGameState.spentCards[1] ~= "a1" then error("failed test 3") end
    -- game state changes
    if newGameState.state ~= "ready" then error("failed test 4") end
end

-- play an exhange card
-- card becomes spent, state becomes "exchange"
-- state value get's from and to
function test_03()
    local gameState = GameState:new()
    gameState.playableCards = {"a1"}
    gameState.cubes = CubeCount:new({yellow = 2, red = 0, green = 0, brown = 0})
    gameState.cards = {
        a1 = {
            guid = "a1",
            action = "exchange",
            from =  CubeCount:new({yellow = 2, red = 0, green = 0, brown = 0}),
            to =  CubeCount:new({yellow = 0, red = 2, green = 0, brown = 0})
        }
    }

    local actions = enumerateActions(gameState):refine("action", "play")
    local newGameState = updateState(gameState, actions[1])

    if #newGameState.playableCards ~= 0 then error("failed test 1") end
    if newGameState.spentCards[1] ~= "a1" then error("failed test 2") end
    if newGameState.state ~= "exchange" then error("failed test 3") end
    if newGameState.stateValue.from.yellow ~= 2 then error("failed test 4") end
    if newGameState.stateValue.to.red ~= 2 then error("failed test 5") end
end

-- play a promote card
-- card becomes spent, state becomes "promote"
-- state value is the cards count var
function test_04()
    local gameState = GameState:new()
    gameState.playableCards = {"a1"}
    gameState.cubes = CubeCount:new({yellow = 2, red = 0, green = 0, brown = 0})
    gameState.cards = {
        a1 = {
            guid = "a1",
            action = "promote",
            count = 2
        }
    }

    local actions = enumerateActions(gameState):refine("action", "play")
    local newGameState = updateState(gameState, actions[1])

    if #newGameState.playableCards ~= 0 then error("failed test 1") end
    if newGameState.spentCards[1] ~= "a1" then error("failed test 2") end
    if newGameState.state ~= "promote" then error("failed test 3") end
    if newGameState.stateValue ~= 2 then error("failed test 4") end
end

-- perform a single promote (after the card is played)
function test_05a()
    local gameState = GameState:new()
    gameState.state = "promote"
    gameState.stateValue = 2
    gameState.spentCards = {"a1"}
    gameState.cubes = CubeCount:new({yellow = 2, red = 0, green = 0, brown = 0})
    gameState.cards = {
        a1 = {
            guid = "a1",
            action = "promote",
            count = 2
        }
    }

    local actions = enumerateActions(gameState):refine("action", "promote"):refine("value", "yellow")
    local newGameState = updateState(gameState, actions[1])

    if newGameState.cubes.yellow ~= 1 then error("failed test 1") end
    if newGameState.cubes.red ~= 1 then error("failed test 2") end
    -- remains in state promote because count > 0
    if newGameState.state ~= "promote" then error("failed test 3") end
    if newGameState.stateValue ~= 1 then error("failed test 4") end
end

-- perform two promotes (after the card is played)
function test_05b()
    local gameState = GameState:new()
    gameState.state = "promote"
    gameState.stateValue = 2
    gameState.spentCards = {"a1"}
    gameState.cubes = CubeCount:new({yellow = 2, red = 0, green = 0, brown = 0})
    gameState.cards = {
        a1 = {
            guid = "a1",
            action = "promote",
            count = 2
        }
    }

    local actions = enumerateActions(gameState):refine("action", "promote"):refine("value", "yellow")
    local newGameState = updateState(gameState, actions[1])
    local actions = enumerateActions(newGameState):refine("action", "promote"):refine("value", "yellow")
    local newGameState = updateState(newGameState, actions[1])

    if newGameState.cubes.yellow ~= 0 then error("failed test 5") end
    if newGameState.cubes.red ~= 2 then error("failed test 6") end
    -- changes state because count = 0
    if newGameState.state ~= "ready" then error("failed test 7") end
end

-- perform promote then rest (after the card is played)
function test_05c()
    local gameState = GameState:new()
    gameState.state = "promote"
    gameState.stateValue = 2
    gameState.spentCards = {"a1"}
    gameState.cubes = CubeCount:new({yellow = 2, red = 0, green = 0, brown = 0})
    gameState.cards = {
        a1 = {
            guid = "a1",
            action = "promote",
            count = 2
        }
    }

    local actions = enumerateActions(gameState):refine("action", "promote"):refine("value", "yellow")
    local newGameState = updateState(gameState, actions[1])
    local actions = enumerateActions(newGameState):refine("action", "rest")
    local newGameState = updateState(newGameState, actions[1])

    if newGameState.cubes.yellow ~= 1 then error("failed test 5") end
    if newGameState.cubes.red ~= 1 then error("failed test 6") end
    if newGameState.state ~= "ready" then error("failed test 7") end
end

-- play a collect card, results in too many cubes
function test_06a()
    local gameState = GameState:new()
    gameState.playableCards = {"a1"}
    gameState.cubes = CubeCount:new({yellow = 9, red = 0, green = 0, brown = 0})
    gameState.cards = {
        a1 = {
            guid = "a1",
            action = "collect",
            cubes = {yellow = 2, red = 0, green = 0, brown = 0}
        }
    }

    local actions = enumerateActions(gameState):refine("action", "play")
    local newGameState = updateState(gameState, actions[1])

    -- increment cubes
    if newGameState.cubes.yellow ~= 11 then error("failed test 1") end
    -- remove playable
    if #newGameState.playableCards ~= 0 then error("failed test 2") end
    -- add to spent
    if newGameState.spentCards[1] ~= "a1" then error("failed test 3") end
    -- game state changes
    if newGameState.state ~= "discard" then error("failed test 4") end
end

-- perform an exchange
function test_06b()
    local gameState = GameState:new()
    gameState.state = "exchange"
    gameState.stateValue = {
        from = CubeCount:new({yellow = 1, red = 1, green = 0, brown = 0}),
        to = CubeCount:new({yellow = 0, red = 0, green = 2, brown = 2})
    }
    gameState.spentCards = {"a1"}
    gameState.cubes = CubeCount:new({yellow = 1, red = 1, green = 0, brown = 0})
    gameState.cards = {
        a1 = {
            guid = "a1",
            action = "exchange",
            from =  CubeCount:new({yellow = 1, red = 1, green = 0, brown = 0}),
            to =  CubeCount:new({yellow = 0, red = 0, green = 2, brown = 2})
        }
    }
    gameState.score = 1

    local actions = enumerateActions(gameState):refine("action", "exchange")
    local newGameState = updateState(gameState, actions[1])

    -- increment cubes
    if newGameState.cubes.yellow ~= 0 then error("failed test 1") end
    if newGameState.cubes.red ~= 0 then error("failed test 2") end
    if newGameState.cubes.green ~= 2 then error("failed test 3") end
    if newGameState.cubes.brown ~= 2 then error("failed test 4") end

    -- auto change state if you run out
    if newGameState.state ~= "ready" then error("failed test 5") end
end

-- perform an exchange, have enough to exchange again
function test_07()
    local gameState = GameState:new()
    gameState.state = "exchange"
    gameState.stateValue = {
        from =  CubeCount:new({yellow = 1, red = 1, green = 0, brown = 0}),
        to =  CubeCount:new({yellow = 0, red = 0, green = 2, brown = 2})
    }
    gameState.spentCards = {"a1"}
    gameState.cubes = CubeCount:new({yellow = 2, red = 2, green = 0, brown = 0})
    gameState.cards = {
        a1 = {
            guid = "a1",
            action = "exchange",
            from =  CubeCount:new({yellow = 1, red = 1, green = 0, brown = 0}),
            to =  CubeCount:new({yellow = 0, red = 0, green = 2, brown = 2})
        }
    }
    gameState.score = 2

    local actions = enumerateActions(gameState):refine("action", "exchange")
    local newGameState = updateState(gameState, actions[1])

    -- increment cubes
    if newGameState.cubes.yellow ~= 1 then error("failed test 1") end
    if newGameState.cubes.red ~= 1 then error("failed test 2") end
    if newGameState.cubes.green ~= 2 then error("failed test 3") end
    if newGameState.cubes.brown ~= 2 then error("failed test 4") end

    -- auto change state if you run out
    if newGameState.state ~= "exchange" then error("failed test 5") end
end

-- perform an exchange, end up with too many cubes
function test_08()
    local gameState = GameState:new()
    gameState.state = "exchange"
    gameState.stateValue = {
        from =  CubeCount:new({yellow = 1, red = 1, green = 0, brown = 0}),
        to =  CubeCount:new({yellow = 0, red = 0, green = 1, brown = 2})
    }
    gameState.spentCards = {"a1"}
    gameState.cubes = CubeCount:new({yellow = 9, red = 1, green = 0, brown = 0})
    gameState.cards = {
        a1 = {
            guid = "a1",
            action = "exchange",
            from =  CubeCount:new({yellow = 1, red = 1, green = 0, brown = 0}),
            to =  CubeCount:new({yellow = 0, red = 0, green = 1, brown = 2})
        }
    }
    gameState.score = 1

    local actions = enumerateActions(gameState):refine("action", "exchange")
    local newGameState = updateState(gameState, actions[1])

    -- increment cubes
    if newGameState.cubes.yellow ~= 8 then error("failed test 1") end
    if newGameState.cubes.red ~= 0 then error("failed test 2") end
    if newGameState.cubes.green ~= 1 then error("failed test 3") end
    if newGameState.cubes.brown ~= 2 then error("failed test 4") end

    -- auto change state if you run out
    if newGameState.state ~= "discard" then error("failed test 5") end
end

-- discard cubes
function test_09()
    local gameState = GameState:new()
    gameState.state = "discard"
    gameState.cubes = CubeCount:new({yellow = 9, red = 1, green = 1, brown = 1})
    gameState.score = 3

    local actions = enumerateActions(gameState)
    local newGameState = updateState(gameState, actions[1])

    if newGameState.cubes.yellow ~= 8 then error("failed test 1") end
    if newGameState.state ~= "discard" then error("failed test 2") end

    local actions = enumerateActions(newGameState)
    local newGameState = updateState(newGameState, actions[2])
    if newGameState.cubes.red ~= 0 then error("failed test 3") end
    if newGameState.state ~= "ready" then error("failed test 4") end
end

-- can't pay without cubes
function test_10()
    local gameState = GameState:new()
    gameState.state = "ready"
    gameState.stateValue = nil
    gameState.spentCards = {}
    gameState.botMoves = 0
    gameState.playableCards = {}
    gameState.pointCards = {}
    gameState.actionCards = {"a1", "a2"}
    gameState.cards = {
        a1 = {
            guid = "a1",
            action = "exchange",
            from =  CubeCount:new({yellow = 1, red = 1, green = 0, brown = 0}),
            to =  CubeCount:new({yellow = 0, red = 0, green = 2, brown = 2})
        },
        a2 = {
            guid = "a2",
            action = "collect",
            cubes = {yellow = 1, red = 1, green = 0, brown = 0}
        }
    }

    local actions = enumerateActions(gameState)

    if #actions ~= 2 then error("failed test 1") end

    local rests = actions:refine("action", "rest")
    local takes = actions:refine("action", "take")

    if #rests ~= 1 then error("failed test 2") end
    if #takes ~= 1 then error("failed test 3") end
end

-- no cards no actions (only rest)
function test_11()
    local gameState = GameState:new()
    gameState.cubes = CubeCount:new({yellow = 2, red = 0, green = 0, brown = 0})
    gameState.cards = {
        a1 = {
            guid = "a1",
            action = "exchange",
            from =  CubeCount:new({yellow = 1, red = 1, green = 0, brown = 0}),
            to =  CubeCount:new({yellow = 0, red = 0, green = 2, brown = 2})
        },
        a2 = {
            guid = "a2",
            action = "collect",
            cubes = {yellow = 1, red = 1, green = 0, brown = 0}
        }
    }


    local actions = enumerateActions(gameState)

    if #actions ~= 1 then error("failed test 1") end
    if actions[1].action ~= "rest" then error("failed test 2") end
end

-- pay for a card, next state can't pay for next card when at max
function test_12()
    local gameState = GameState:new()
    gameState.actionCards = {"a1", "a2", "a3", "a4", "a5", "a6"}
    gameState.paidIndex = 5
    gameState.cubes = CubeCount:new({yellow = 2, red = 0, green = 0, brown = 0})

    local actions = enumerateActions(gameState)

    local rests = actions:refine("action", "rest")
    local takes = actions:refine("action", "take")

    if #rests ~= 1 then error("failed test 2") end
    if #takes ~= 1 then error("failed test 3") end
end

-- pay for an action card
function test_13a()
    local gameState = GameState:new()
    gameState.actionCards = {"a1", "a2", "a3", "a4", "a5", "a6"}
    gameState.cubes = CubeCount:new({yellow = 2, red = 0, green = 0, brown = 0})

    local actions = enumerateActions(gameState)
    local payActions = actions:refine("action", "pay")
    if #payActions ~= 1 then error("failed test 1") end

    gameState = updateState(gameState, payActions[1])
    if gameState.paidIndex ~= 1 then error("failed test 1") end
    if gameState.cubes.yellow ~= 1 then error("failed test 2") end
    if gameState.state ~= "taking_action" then error("failed test 3") end
    if gameState.actionCubes[1].yellow ~= 1 then error("failed test 4") end
end

-- pay for an action card
function test_13b()
    local gameState = GameState:new()
    gameState.actionCards = {"a1", "a2", "a3", "a4", "a5", "a6"}
    gameState.paidIndex = 1
    gameState.cubes = CubeCount:new({yellow = 2, red = 0, green = 0, brown = 0})

    local actions = enumerateActions(gameState)
    local payActions = actions:refine("action", "pay")
    if #payActions ~= 1 then error("failed test 1") end

    gameState = updateState(gameState, payActions[1])
    if gameState.paidIndex ~= 2 then error("failed test 2") end
    if gameState.cubes.yellow ~= 1 then error("failed test 3") end
    if gameState.state ~= "taking_action" then error("failed test 4") end
    if gameState.actionCubes[2].yellow ~= 1 then error("failed test 5") end
end

-- take first action card
function test_14a()
    local gameState = GameState:new()
    gameState.actionCards = {"a1", "a2", "a3", "a4", "a5", "a6"}
    gameState.actionCubes = {
        CubeCount:new({yellow=1, red=0, green=0, brown = 0}),
        CubeCount:new({yellow=0, red=1, green=0, brown = 0}),
        CubeCount:new({yellow=0, red=0, green=1, brown = 0}),
        CubeCount:new({yellow=0, red=0, green=0, brown = 0}),
        CubeCount:new({yellow=0, red=0, green=0, brown = 0})
    }

    local actions = enumerateActions(gameState)
    local takeActions = actions:refine("action", "take")

    gameState = updateState(gameState, takeActions[1])


    if gameState.playableCards[1] ~= "a1" then error("failed test 1") end
    if gameState.cubes.yellow ~= 1 then error("failed test 2") end

    -- this one differs from the actual game in that cards are not replaced
    if #gameState.actionCards ~= 5 then error("failed test 3") end
    if gameState.actionCards[1] ~= "a2" then error("failed test 4") end
    if gameState.paidIndex ~= 0 then error("failed test 5") end

    if CubeCount:new(gameState.actionCubes[1]):equals({yellow=0, red=1, green=0, brown=0}) == false then
        error("failed test 6")
    end
end

-- take second action card
function test_14b()
    local gameState = GameState:new()
    gameState.actionCards = {"a1", "a2", "a3", "a4", "a5", "a6"}
    gameState.actionCubes = {
        CubeCount:new({yellow=1, red=0, green=0, brown = 0}),
        CubeCount:new({yellow=0, red=1, green=0, brown = 0}),
        CubeCount:new({yellow=0, red=0, green=1, brown = 0}),
        CubeCount:new({yellow=0, red=0, green=0, brown = 0}),
        CubeCount:new({yellow=0, red=0, green=0, brown = 0})
    }
    gameState.paidIndex = 1

    local actions = enumerateActions(gameState)
    local takeActions = actions:refine("action", "take")

    gameState = updateState(gameState, takeActions[1])

    if gameState.playableCards[1] ~= "a2" then error("failed test 1") end
    if gameState.cubes.red ~= 1 then error("failed test 2") end

    -- this one differs from the actual game in that cards are not replaced
    if #gameState.actionCards ~= 5 then error("failed test 3") end
    if gameState.actionCards[2] ~= "a3" then error("failed test 4") end
    if gameState.paidIndex ~= 0 then error("failed test 5") end

    if CubeCount:new(gameState.actionCubes[2]):equals({yellow=0, red=0, green=1, brown = 0}) == false then
        error("failed test 6")
    end
end

-- take an action card, end up with too many coins
function test_15()
    local gameState = GameState:new()
    gameState.actionCards = {"a1", "a2", "a3", "a4", "a5", "a6"}
    gameState.actionCubes = {
        CubeCount:new({yellow=1, red=0, green=0, brown = 0}),
        CubeCount:new({yellow=0, red=1, green=0, brown = 0}),
        CubeCount:new({yellow=0, red=0, green=1, brown = 0}),
        CubeCount:new({yellow=0, red=0, green=0, brown = 0}),
        CubeCount:new({yellow=0, red=0, green=0, brown = 0})
    }
    gameState.cubes = CubeCount:new({yellow = 10, red = 0, green = 0, brown = 0})

    local actions = enumerateActions(gameState)
    local takeActions = actions:refine("action", "take")
    gameState = updateState(gameState, takeActions[1])

    if gameState.state ~= "discard" then error("failed test 1") end
end

-- take a points card, gold coin included
function test_16a()
    local gameState = GameState:new()
    gameState.pointCards = {"a1", "a2"}
    gameState.cubes = CubeCount:new({yellow = 2, red = 2, green = 2, brown = 2})
    gameState.coins = {gold = "gold", silver = "silver", goldBag = 5, silverBag = 5}
    gameState.cards = {
        a1 = {
            action = "points",
            cost = {yellow=1, red=1, green=1, brown = 2},
            value = 13,
            guid = "a1"
        },
        a2 = {
            action = "points",
            cost = {yellow=0, red=0, green=1, brown = 2},
            value = 9,
            guid = "a2"
        }
    }
    gameState.score = 6


    local actions = enumerateActions(gameState)
    local takeActions = actions:refine("action", "take")
    gameState = updateState(gameState, takeActions[1])

    if gameState.state ~= "ready" then error("failed test 1") end
    if gameState.score ~= 18 then error("failed test 2") end
    if #gameState.pointCards ~= 1 then error("failed test 3") end
    if gameState.pointCards[1] ~= "a2" then error("failed test 4") end
    if gameState.scored.gold ~= 1 then error("failed test 5") end
    if gameState.scored.cards[1] ~= "a1" then error("failed test 6") end
    if gameState.coins.goldBag ~= 4 then error("failed test 7") end
end

-- take a points card, last gold coin
function test_16b()
    local gameState = GameState:new()
    gameState.pointCards = {"a1", "a2"}
    gameState.cubes = CubeCount:new({yellow = 2, red = 2, green = 2, brown = 2})
    gameState.coins = {gold = "gold", silver = "silver", goldBag = 0, silverBag = 5}
    gameState.cards = {
        a1 = {
            action = "points",
            cost = {yellow=1, red=1, green=1, brown = 2},
            value = 13,
            guid = "a1"
        },
        a2 = {
            action = "points",
            cost = {yellow=0, red=0, green=1, brown = 2},
            value = 9,
            guid = "a2"
        }
    }
    gameState.score = 6

    local actions = enumerateActions(gameState)
    local takeActions = actions:refine("action", "take")
    gameState = updateState(gameState, takeActions[1])

    if gameState.state ~= "ready" then error("failed test 1") end
    if gameState.score ~= 18 then error("failed test 2") end
    if #gameState.pointCards ~= 1 then error("failed test 3") end
    if gameState.pointCards[1] ~= "a2" then error("failed test 4") end
    if gameState.scored.gold ~= 1 then error("failed test 5") end
    if gameState.scored.cards[1] ~= "a1" then error("failed test 6") end
    if gameState.coins.goldBag ~= 0 then error("failed test 7") end
    if gameState.coins.gold ~= "silver" then error("failed test 8") end
    if gameState.coins.silver ~= "" then error("failed test 9") end
end
