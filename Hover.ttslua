globalLastQTake = nil

function onObjectHover(playerColor, hoveredObject)
    if playerColor ~= gameModel.currentPlayer then return end

    if hoveredObject ~= nil then
        if isClass(hoveredObject, "card") and isClass(hoveredObject, "action") then
            onActionCardHover(playerColor, hoveredObject)
            return
        end
    end

    clearHover()
end

function clearHover()
    if globalLastQTake ~= nil then
        globalLastQTake.clearButtons()
    end
    globalLastQTake = nil
end

function onActionCardHover(playerColor, card)
    local actionCards = getActionCards()
    local cubes = getPlayerCubes(playerColor)
    local yellows = cubes:count().yellow

    for i = 2, #actionCards do
        if card == actionCards[i] and yellows >= i - 1 then
            addQuickTakeButton(card)
        end
    end
end

function addQuickTakeButton(card, functionName)
   if card == nil then return end
   if card.getButtons() ~= nil then return end
   log(card.getButtons())

   if globalLastQTake ~= nil then
       gclearHover()
   end

   parameters = {
       click_function = "quickTake",
       label = "Pay & Take",
       position = {0, 0.5, 1.75},
       scale = {3, 1, 2},
       width = 500,
       height = 125,
       font_size = 90,
       color = {0.1, 0.9, 0.9}
   }

   card.createButton(parameters);
   globalLastQTake = card
end

function quickTake(card, playerColor)
    globalLastQTake.clearButtons()
    local cubes = getPlayerCubes(owner)
    local actionCards = getActionCards()

    local index = -1
    for i = 2, #actionCards do
        if card == actionCards[i] then
            index = i
        end
    end

    local yellowCubes = cubes:getCubes("yellow")
    for i = 1, index - 1 do
        local zone = getObjectFromGUID(keys.actionCardsScriptingZone[i])
        cubeSetOwner(yellowCubes[i], nil)
        sortActionCubes(zone, yellowCubes[i])
    end

    takeActionCard(actionCards[index], playerColor)
end
