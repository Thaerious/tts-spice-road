-- the onLoad hook can be fround in the Startup.ttslua module

function onSave()
    return JSON.encode(gameModel)
end

-- check card collisions to automate actions
function onObjectCollisionEnter(registeredObject, collisionInfo)
    if gameModel.state == "not_started" then return end
    local collisionObject = collisionInfo.collision_object

    -- trigger pawn move
    if isClass(registeredObject, "pawn") and isClass(collisionObject, "caravan") then
        onPawnCollideCaravan(collisionObject)
        return
    end

    -- cube collides with cube bag
    if isClass(registeredObject, "cubeBag") and isClass(collisionObject, "cube") then
        collisionObject.destruct()
        return
    end

    -- unowned cube collides with caravan card
    if isClass(registeredObject, "caravan") and isClass(collisionObject, "cube") and collisionObject.getVar("owner") == nil then
        cubeSetOwner(collisionObject,  registeredObject.getVar("owner"))
        return
    end

    -- only trigger when the owner is acting
    if registeredObject.getVar("owner") ~= gameModel.currentPlayer then return end

    -- when an action card collides

    if isClass(registeredObject, "card") then
        log(registeredObject.getGUID() ~= gameModel.active.guid)
        if isActiveSpent() == false and registeredObject.getGUID() ~= gameModel.active.guid then
            setActive(registeredObject)
            if isClass(registeredObject, "collect") then collect() end
        elseif isClass(collisionObject, "cube") and registeredObject.getVar("status") ~= "spent" then
            cubeCollideCard(registeredObject, collisionObject)
        end
    end
end

function cubeCollideCard(card, cube)
    local activeObject = getObjectFromGUID(gameModel.active.guid)

    if card ~= activeObject and activeObject.getVar("state") ~= "spent" then
        setActive(card)
    end

    if card ~= activeObject then return end

    if isClass(card, "exchange") then
        exchangeCube(card, gameModel.currentPlayer)
    elseif isClass(card, "promote") then
        promoteAct(card, gameModel.currentPlayer)
    end
end

-- return true if active card is spent
-- return false if active card is not spent, or is not set
function isActiveSpent()
    if gameModel.active.guid == "" then return false end
    local activeCard = getObjectFromGUID(gameModel.active.guid)
    return activeCard.getVar("state") == "spent"
end

function onPawnCollideCaravan(caravan)
   local color = caravan.getVar("owner")
   clearActive()
   endTurnCleanup()
   startTurn(color)
end

function onObjectEnterScriptingZone(zone, obj)
    if isClass(zone, "actionCards") and isClass(obj, "cube") then
        onCubeEnterScriptingZone(zone, obj) -- pay for action card
    elseif isClass(zone, "actionCards") and isClass(obj, "card") then
        obj.setVar("index", zone.getVar("index")) -- set index on dealt cards
    end
end

function onObjectLeaveScriptingZone(zone, obj)
    if isClass(zone, "actionCards") and isClass(obj, "cube") then
        onCubeLeaveScriptingZone(zone, obj) -- un pay for action card
    end
end

-- prevent players from messing with objects that aren't theirs
function onObjectPickUp(color, obj)
    if color == "Black" then return end
    if gameModel.players[color].dev == true then return end
    local owner = obj.getVar("owner")

    if owner == nil then return true end

    if owner ~= color then
        obj.drop()
        local p = obj.getPosition()
        obj.setPosition(p)
        obj.setVelocity({x=0, y=0, z=0})
    end
end

-- trigger playCard when a valid action card is dropped
function onObjectDrop(color, card)
    if isClass(card, "card") == false then return end
    if isClass(card, "action") == false then return end

    if isInHand(card, color) == false and card.getVar("state") ~= "spent" and color == gameModel.currentPlayer then
        card.registerCollisions()
        setupContextMenu(card)
    elseif isInHand(card, color) == true then
        card.unregisterCollisions()
        card.call("resetState")
    end
end

-- performed when a card is played
function playCard(color, card)
    if card.getVar("state") == "ready" then
        setupContextMenu(card)
        setActive(card)
        card.registerCollisions()
    end
end

-- set the last card played
-- updates the game model for other methods to poll
function setActive(card)
    gameModel.active.guid = card.getGUID()

    if isClass(card, "promote") then
        gameModel.active.action = "promote"
        gameModel.active.value = card.getVar("startingCount")
    elseif isClass(card, "exchange") then
        gameModel.active.action = "exchange"
        gameModel.active.value = {
            from = CubeCount:new(card.getTable("from")),
            to = CubeCount:new(card.getTable("to")),
        }
    elseif isClass(card, "collect") then
        gameModel.active.action = "collect"
        gameModel.active.value = CubeCount:new(card.getTable("cubes"))
    end
end

-- set game state to 'card not played'
function clearActive()
    if gameModel.active.guid ~= "" and getObjectFromGUID(gameModel.active.guid) ~= nil then
        local card = getObjectFromGUID(gameModel.active.guid)
        card.unregisterCollisions()
        card.clearContextMenu()
    end

    gameModel.active.action = ""
    gameModel.active.guid = ""
    gameModel.active.value = ""
end

function filterObjectEnterContainer(container, enter_object)
    if isClass(enter_object, "card") then return false end
    return true
end
