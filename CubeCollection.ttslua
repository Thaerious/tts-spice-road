-- class CubeCollection
-- a list of cube objects
CubeCollection = {}
function CubeCollection:new(o)
    if (type(o) == "nil") then o = {} end
    if (type(o) != "table") then o = {o} end
    setmetatable(o, self)
    self.__index = self
    return o
end

function CubeCollection:size()
    return #self
end

function CubeCollection:isEmpty()
    return #self == 0
end

function CubeCollection:getCube(color)
    for i = 1,#self do
        if isClass(self[i], color) then return self[i] end
    end
    return nil
end

function CubeCollection:add(cube)
    table.insert(self, cube)
end

function CubeCollection:has(cubeCount)
    return self:count():has(cubeCount)
end

-- return a cubeCount object generated from this collection
function CubeCollection:count()
    local r = CubeCount:new()

    for i = 1,#self do
        if isClass(self[i], "yellow") then
            r.yellow = r.yellow + 1;
        elseif isClass(self[i], "red") then
            r.red = r.red + 1;
        elseif isClass(self[i], "green") then
            r.green = r.green + 1;
        elseif isClass(self[i], "brown") then
            r.brown = r.brown + 1;
        end
    end

    return r
end

function CubeCollection:sum()
    return self:count():sum()
end

-- destruct all cubes in collection
-- when complete call the cb function, passing in the count of cubes destructed
function CubeCollection:destruct(cb)
    cb = cb or function() end
    local count = self:count()

    for i = 1,#self do
        self[i].destruct()
    end

    Wait.frames(function() cb(count) end, 1)
end

-- create a new collection of cubes based on cubeCount
function CubeCollection:subset(cubeCount)
    local rvalue = CubeCollection:new()

    local yellow = 0
    local red = 0
    local green = 0
    local brown = 0

    for i = 1,#self do
        local cube = self[i]
        if isClass(cube, "yellow") and yellow < cubeCount.yellow then
             yellow = yellow + 1;
             rvalue:add(cube);
        elseif isClass(cube, "red") and red < cubeCount.red then
              red = red + 1;
              rvalue:add(cube);
        elseif isClass(cube, "green") and green < cubeCount.green then
            green = green + 1;
            rvalue:add(cube);
        elseif isClass(cube, "brown") and brown < cubeCount.brown then
            brown = brown + 1;
            rvalue:add(cube);
        end
    end

    return rvalue;
end
